import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error

#Load the cleaned dataset
df = pd.read_csv("cleaned_final.csv")  # This file should have all numeric columns

#Define features and target
X = df[['spec_score', 'battery', 'ram', 'internal_storage', 'rear_mp', 'front_mp',
        'brand_encoded', 'processor_encoded']]
y = df['price']

#Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Train Random Forest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

#Predict and evaluate
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print("\n MODEL PERFORMANCE")
print("-----------------------------")
print("RÂ² Score:", round(r2, 4))
print("RMSE:", round(rmse, 2))

#Show feature importance
importances = model.feature_importances_
coeff_df = pd.DataFrame(importances, X.columns, columns=["Importance"])
coeff_df = coeff_df.sort_values(by="Importance", ascending=False)
print("\n FEATURE IMPORTANCE (Random Forest)")
print(coeff_df)

#Plot predicted vs actual prices
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Smartphone Prices")
plt.grid(True)
plt.tight_layout()
plt.show()